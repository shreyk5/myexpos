alias functionNum R1;
//alias curr_pid R2;

if(functionNum == ACQUIRE_TERMINAL) then
	alias curr_pid R2;
	while([TERMINAL_STATUS_TABLE] == 1) do //check if terminal is already in use
		[PROCESS_TABLE+curr_pid*16+4] = WAIT_TERMINAL;
		backup;
		call MOD_5;	//schedule some other process while curr process is waiting for terminal to be freed
		restore;
	endwhile;
	[TERMINAL_STATUS_TABLE] = 1;	//give the terminal to this process
	[TERMINAL_STATUS_TABLE+1] = curr_pid;
	//breakpoint;
	return;
endif;

if(functionNum == RELEASE_TERMINAL) then
	alias curr_pid R2;
	if(curr_pid != [TERMINAL_STATUS_TABLE+1]) then
		R0 = -1;
		return;
	endif;
	
	[TERMINAL_STATUS_TABLE] = 0;	//free the terminal
	
	alias i R7;
	i = 0;
	while(i<16) do
		if([PROCESS_TABLE+i*16+4] == WAIT_TERMINAL) then
			[PROCESS_TABLE+i*16+4] = READY;	//set status of all processes who were waiting for terminal as READY
		endif;
		i = i + 1;
	endwhile;
	R0 = 0; //successful 
	return;	
endif;

if(functionNum == ACQUIRE_DISK) then
	alias curr_pid R2;
	while([DISK_STATUS_TABLE]==1) do
		[PROCESS_TABLE+16*curr_pid+4] = WAIT_DISK;
		backup;
		call MOD_5;
		restore;
	endwhile;
	
	[DISK_STATUS_TABLE] = 1;
	[DISK_STATUS_TABLE+4] = curr_pid;
	
	return;
endif;

if(functionNum == ACQUIRE_SEMAPHORE) then
	alias curr_pid R2;
	//find a free entry in the semaphore table
	alias i R4;
	i = 0;
	R0 = -1;
	while(i<(MAX_SEM_COUNT)) do
		if([SEMAPHORE_TABLE+i*4+1] == 0) then
			[SEMAPHORE_TABLE+i*4+1] = 1;	//process count
			[SEMAPHORE_TABLE+i*4+0] = -1;	//Locking PID
			R0 = i;
			return;
		endif;
		i = i + 1;
	endwhile;

	return;
endif;

if(functionNum == RELEASE_SEMAPHORE) then
	alias curr_pid R3;
	alias sem_table_idx R2;

	//if the semaphore to be released is locked by the process then unlock it for other processes
	if([SEMAPHORE_TABLE + sem_table_idx*4] == curr_pid) then
		[SEMAPHORE_TABLE + sem_table_idx*4] = -1;	//unlock the semaphore

		alias i R4;
		i = 0;
		while(i<16) do
			if([PROCESS_TABLE+i*16+4] == WAIT_SEMAPHORE && [PROCESS_TABLE+i*16+5] == sem_table_idx) then
				[PROCESS_TABLE+i*16+4] = READY;
			endif;
			i = i + 1;
		endwhile;
	endif;
		
	//decrement the process count in the semaphore table entry
	[SEMAPHORE_TABLE + 4*sem_table_idx + 1] = [SEMAPHORE_TABLE + 4*sem_table_idx + 1] - 1; 
	
	return;
endif;
