loadi(63,13);	//load library code
loadi(64,14);

loadi(65,7);	//load INIT program
//loadi(66,8);	//no need

loadi(22,35);	//load INT10 module
loadi(23,36);

loadi(2,15);	//load exception handler
loadi(3,16);

loadi(4,17);	//load timer interrupt
loadi(5,18);

loadi(16,29);	//INT7 for print
loadi(17,30);

//loadi(83,69);   //load executable file

loadi(40,53);	//load module 0
loadi(41,54);

loadi(48,61);	//load module 4
loadi(49,62);

loadi(14,27);	//INT6 for read
loadi(15,28);

loadi(8,21);	//load console interrupt handler
loadi(9,22);

loadi(20,33);	//INT9
loadi(21,34);

loadi(42,55);	//load module 1
loadi(43,56);

loadi(44,57);	//load module 2
loadi(45,58);

loadi(59,3);	//load inode table
loadi(60,4);

loadi(62,5);	//load root file

loadi(6,19);	//load disk controller interrupt routine
loadi(7,20);

loadi(61,2);	//load the disk free list

loadi(18,31);	//load INT8
loadi(19,32);

loadi(24,37);	//load INT11
loadi(25,38);

loadi(32,45);	//load INT15
loadi(33,46);

loadi(28,41);	//load INT13
loadi(29,42);

loadi(30,43);	//load INT14
loadi(31,44);

loadi(10,23);	//load INT4
loadi(11,24);

loadi(12,25);	//load INT5
loadi(13,26);

loadi(46,59);	//load MOD3
loadi(47,60);

loadi(26,39);	//load INT12
loadi(27,40);

loadi(34,47);	//load INT16
loadi(35,48);

loadi(36,49);	//load INT17
loadi(37,50);

loadi(67,9);	//load shell
loadi(68,10);

loadi(52,65);	//load MOD6
loadi(53,66);

//initialise memory free list
alias i R1;
i = 0;

while(i<128) do
	if(i<=82) then
		[MEMORY_FREE_LIST+i] = 1;
	else
		[MEMORY_FREE_LIST+i] = 0;
	endif;
	i = i + 1;
endwhile;

//initialise file status table
i = 0;
while(i<MAX_FILE_NUM) do
	alias file_status_table R2;
	file_status_table = FILE_STATUS_TABLE + 4*i; 
	[file_status_table] = -1;	//locking PID
	[file_status_table + 1] = -1;	//file open count
	i = i + 1;
endwhile;

//initialise open file table
i = 0;
while(i<MAX_OPENFILE_NUM) do
	alias open_file_table R3;
	open_file_table = OPEN_FILE_TABLE + 4*i; 
	[open_file_table + 0] = -1;	//inode index
	[open_file_table + 1] = 0;	//open instance count
	i = i + 1;
endwhile;

//initialise buffer table
i = 0;
while(i<MAX_BUFFER) do
	alias buffer_table R4;
	buffer_table = BUFFER_TABLE + 4*i;
	[buffer_table] = -1;	//block
	[buffer_table + 1] = 0;	//dirty
	[buffer_table + 2] = -1;	//locking PID
	i = i + 1;
endwhile;


//initialise the semaphore table for all entries
i = 0;

while(i < MAX_SEM_COUNT) do
	alias semaphore_table R5;
	semaphore_table = SEMAPHORE_TABLE + 4*i; 
	[semaphore_table + 0] = -1;
	[semaphore_table + 1] = 0;
	i = i + 1;	
endwhile;

[TERMINAL_STATUS_TABLE] = 0;
[DISK_STATUS_TABLE] = 0;

// initialise STATE field to be TERMINATED for other processes
i = 0;

while(i<16) do
	alias protable R6;
	protable = PROCESS_TABLE + i*16;
	[protable + 4] = TERMINATED;
	[protable + 6] = 0;
	[protable + 0] = 0;	//tick field
	i = i + 1;
endwhile;

[SYSTEM_STATUS_TABLE + 3] = 0;	//wait_mem_count
[SYSTEM_STATUS_TABLE + 2] = 45;	//mem_free_count
[SYSTEM_STATUS_TABLE + 5] = 0;	//paging status
[SYSTEM_STATUS_TABLE + 4] = 0;	//number of processes which are swapped

//-----------------set page table entries for INIT(Login) program--------------------
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//LIBRARY
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//HEAP
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//CODE
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

[PTBR+16] = 66;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

PTBR = PTBR - 20;

[PROCESS_TABLE+17] = 1;
[PROCESS_TABLE+19] = KERNEL;	//login process is considered as kernel process
[PROCESS_TABLE+20] = CREATED;
[PROCESS_TABLE+27] = 77;
[PROCESS_TABLE+28] = 0;
[PROCESS_TABLE+29] = 8*512;
[PROCESS_TABLE+30] = PAGE_TABLE_BASE+20;
[PROCESS_TABLE+31] = 10;

[66*512] = [65*512+1];

//initialise resource table entries
i = 510;
while(i>=496) do
	[77*512+i] = -1;
	i = i - 2;
endwhile;

//-----------------set page table entries for Shell program--------------------
PTBR = PAGE_TABLE_BASE + 40;
PTLR = 10;

//LIBRARY
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//HEAP
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//CODE
[PTBR+8] = 67;
[PTBR+9] = "0100";
[PTBR+10] = 68;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

[PTBR+16] = 78;
[PTBR+17] = "0110";
[PTBR+18] = 79;
[PTBR+19] = "0110";

PTBR = PTBR - 40;

[PROCESS_TABLE + 33] = 2;
[PROCESS_TABLE + 34] = 1;
[PROCESS_TABLE + 35] = ROOT;	//shell process is owned by root
[PROCESS_TABLE + 36] = TERMINATED;
[PROCESS_TABLE + 43] = 80;
[PROCESS_TABLE + 44] = 0;
[PROCESS_TABLE + 45] = 8*512;
[PROCESS_TABLE + 46] = PAGE_TABLE_BASE + 40;
[PROCESS_TABLE + 47] = 10;

[78*512] = [67*512+1];

//initialise resource table of shell process
i = 510;

while(i>=496) do
	[80*512+i] = -1;
	i = i - 2;
endwhile;

//initialise the disk map table entries
alias disk_map_table R2;
disk_map_table = DISK_MAP_TABLE + 20; 
i = 0;
while(i<10) do
	[disk_map_table + i] = -1;
	if(i==4) then
		[disk_map_table + i] = 9;
	endif;
	
	if(i==5) then
		[disk_map_table + i] = 10;
	endif;
	i = i + 1;
endwhile;

return;

