//system calls Newusr, Remusr, Setpwd, Getuname and Getuid are implemented in interrupt routine 16
//they have sys call numbers 22, 23, 24, 25, 26 respectively

alias syscall R4;

alias curr_pid R5;
curr_pid = [SYSTEM_STATUS_TABLE + 1];

alias userSP R6;
userSP = SP;

syscall = [[PTBR + 2 * ((userSP - 5) % 512)] * 512 + (userSP - 5) % 512];

[PROCESS_TABLE + curr_pid * 16 + 13] = SP;	//save SP into UPTR
SP = [PROCESS_TABLE + curr_pid * 16 + 11] * 512 - 1;	//change to kernel stack

alias RetAddr R7;
RetAddr = [PTBR + 2 * ((userSP - 1) % 512)] * 512 + (userSP - 1) % 512;

//---------------------------------------NEWUSR--------------------------------------------------------------
//arguments are userName and password
//return 0 if success
//return -1 if user already exists
//return -2 if permission denied
//return -3 if Number of users has reached the system limit

if (syscall == 22) then

	[PROCESS_TABLE + curr_pid * 16 + 9] = 22;	//set the mode flag
	
	if(curr_pid != 2 || [PROCESS_TABLE + curr_pid*16 + 3] != 1) then //current process is not shell or current user is not root
		[RetAddr] = -2;
		[PROCESS_TABLE + curr_pid * 16 + 9] = 0;	//reset the mode flag
		SP = [PROCESS_TABLE + curr_pid * 16 + 13];
		ireturn;
	endif;
	
	alias UserName R8;
	UserName = [[PTBR + 2 * ((userSP - 4) % 512)] * 512 + (userSP - 4) % 512];

	alias password R9;
	password = [[PTBR + 2 * ((userSP - 3) % 512)] * 512 + (userSP - 3) % 512];
	encrypt password;

	alias i R10;
	i = 0;

	while(i < MAX_USER_NUM) do
		if([USER_TABLE + 2*i] == UserName) then	//username already exists
			[RetAddr] = -1;
			[PROCESS_TABLE + curr_pid * 16 + 9] = 0;	//reset the mode flag
			SP = [PROCESS_TABLE + curr_pid * 16 + 13];
			ireturn;
		endif;
		i = i + 1;
	endwhile;

	alias free_entry R11;
	free_entry = -1;

	i = 0;
	while(i < MAX_USER_NUM) do
		if([USER_TABLE + 2*i] == -1) then	//free entry found
			free_entry = i;
			break;
		endif;
		i = i + 1;
	endwhile;

	if(free_entry == -1) then	//no free entry found
		[RetAddr] = -3;
		[PROCESS_TABLE + curr_pid * 16 + 9] = 0;	//reset the mode flag
		SP = [PROCESS_TABLE + curr_pid * 16 + 13];
		ireturn;
	endif;

	//free entry is found
	[USER_TABLE + free_entry*2] = UserName;
	[USER_TABLE + free_entry*2 + 1] = password;
	
	[RetAddr] = 0;	//success
	[PROCESS_TABLE + curr_pid * 16 + 9] = 0;	//reset the mode flag
	SP = [PROCESS_TABLE + curr_pid * 16 + 13];
	ireturn;
endif;
//-------------------------------------------------------------------------------------------------------------

//------------------------------------------------REMUSR-------------------------------------------------------
//This system call is executed from the shell process of the root user
//The root user and kernel cannot be removed
//argument is a username
//return -1 if user does not exist
//return -2 if permission denied
//return -3 if undeleted files exist for the user
if(syscall == 23) then
	[PROCESS_TABLE + curr_pid * 16 + 9] = 23;	//set the mode flag
	
	alias UserName R8;
	UserName = [[PTBR + 2 * ((userSP - 4) % 512)] * 512 + (userSP - 4) % 512];

	if(curr_pid != 2 || [PROCESS_TABLE + curr_pid*16 + 3] != 1) then //curr process is not shell of root
		[RetAddr] = -2;
		[PROCESS_TABLE + curr_pid * 16 + 9] = 0;	//reset the mode flag
		SP = [PROCESS_TABLE + curr_pid * 16 + 13];
		ireturn;	
	endif;

	if(UserName == "root" || UserName == "kernel") then //root or kernel user being deleted
		[RetAddr] = -2;
		[PROCESS_TABLE + curr_pid * 16 + 9] = 0;	//reset the mode flag
		SP = [PROCESS_TABLE + curr_pid * 16 + 13];
		ireturn;	
	endif;

	//find the username in USER TABLE
	alias i R9;
	i = 0;
	alias userID R10;
	userID = -1;

	while(i < MAX_USER_NUM) do
		if([USER_TABLE + 2*i] == -1) then
			userID = i;
			break;
		endif;
		i = i + 1;
	endwhile;

	if(userID == -1) then	//user does not exist
		[RetAddr] = -1;
		[PROCESS_TABLE + curr_pid * 16 + 9] = 0;	//reset the mode flag
		SP = [PROCESS_TABLE + curr_pid * 16 + 13];
		ireturn;
	endif;

	//loop through the root file entries to check if it contains files of this user
	i = 0;
	while(i<MAX_FILE_NUM) do
		if([ROOT_FILE + 8*i] != -1 && [ROOT_FILE + 8*i + 3] == UserName) then	//undeleted files exist for the user
			[RetAddr] = -3;
			[PROCESS_TABLE + curr_pid * 16 + 9] = 0;	//reset the mode flag
			SP = [PROCESS_TABLE + curr_pid * 16 + 13];
			ireturn;
		endif;
		i = i + 1;
	endwhile;

	//user exists
	[USER_TABLE + 2*userID] = -1;	//invalidate the user table entries
	[USER_TABLE + 2*userID + 1] = -1;

	[RetAddr] = 0;	//user removal success
	[PROCESS_TABLE + curr_pid * 16 + 9] = 0;	//reset the mode flag
	SP = [PROCESS_TABLE + curr_pid * 16 + 13];
	ireturn;

endif;
//-------------------------------------------------------------------------------------------------------------

//--------------------------------------------SETPWD-----------------------------------------------------------
//This system call can be executed only from the shell process. 
//A user can set only his/her password
//Root user can set any user's password.

//arguments are username and password
//return 0 if success
//return -1 if unauthorised attempt to change password
//return -2 if user does not exist

if(syscall == 24) then
	[PROCESS_TABLE + curr_pid * 16 + 9] = 24;	//set the mode flag
	
	if([PROCESS_TABLE + 16*curr_pid + 3] != 2) then	//if not called from shell
		[RetAddr] = -1;	
		[PROCESS_TABLE + curr_pid * 16 + 9] = 0;	//reset the mode flag
		SP = [PROCESS_TABLE + curr_pid * 16 + 13];
		ireturn;
	endif; 

		

	alias UserName R8;
	UserName = [[PTBR + 2 * ((userSP - 4) % 512)] * 512 + (userSP - 4) % 512];

	alias password R9;
	password = [[PTBR + 2 * ((userSP - 3) % 512)] * 512 + (userSP - 3) % 512];
	encrypt password;
	
endif;

//-------------------------------------------------------------------------------------------------------------